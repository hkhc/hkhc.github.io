(self.webpackChunkhkhc_github_io=self.webpackChunkhkhc_github_io||[]).push([[283],{3641:function(t,e,i){"use strict";i.r(e),i.d(e,{frontMatter:function(){return r},metadata:function(){return l},toc:function(){return s},default:function(){return p}});var n=i(2122),o=i(9756),a=(i(7294),i(3905)),r={title:"Configuration",id:"configuration",sidebar_position:5},l={unversionedId:"ihlog/configuration",id:"ihlog/configuration",isDocsHomePage:!1,title:"Configuration",description:"IHLog is capable of targetting the log to various destinations. When it is first use in the process,",source:"@site/docs/ihlog/configuration.md",sourceDirName:"ihlog",slug:"/ihlog/configuration",permalink:"/docs/ihlog/configuration",editUrl:"https://github.com/hkhc/hkhc.github.io/docs/ihlog/configuration.md",version:"current",sidebarPosition:5,frontMatter:{title:"Configuration",id:"configuration",sidebar_position:5},sidebar:"ihlogSidebar",previous:{title:"Tag Creation",permalink:"/docs/ihlog/tag-creation"},next:{title:"Log Providers",permalink:"/docs/ihlog/log-providers"}},s=[{value:"<code>LogSettings</code>",id:"logsettings",children:[]}],g={toc:s};function p(t){var e=t.components,i=(0,o.Z)(t,["components"]);return(0,a.kt)("wrapper",(0,n.Z)({},g,i,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"IHLog is capable of targetting the log to various destinations. When it is first use in the process,\nit read the file ",(0,a.kt)("inlineCode",{parentName:"p"},"ihlog.properties")," in the root of Java classpath. The file is a standard java\nproperties file and the content looks like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-properties",metastring:'title="ihlog.properties"',title:'"ihlog.properties"'},"provider=io.hkhc.log.providers.AndroidLogProvider\n")),(0,a.kt)("p",null,"If the files does not exist, or the class specified in the file is not found, then the library is\nset to use ",(0,a.kt)("inlineCode",{parentName:"p"},"AndroidLogProvider")," which effectively means standard Android Log API is used."),(0,a.kt)("h3",{id:"logsettings"},(0,a.kt)("inlineCode",{parentName:"h3"},"LogSettings")),(0,a.kt)("p",null,"Alternatively, we may use the singleton class ",(0,a.kt)("inlineCode",{parentName:"p"},"IHLogConfig")," to change the\ncconfiguration on the fly.\nIt has several properties, the library take effect immediately when the properties changed."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"property"),(0,a.kt)("th",{parentName:"tr",align:null},"purpose"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"defaultPriority")),(0,a.kt)("td",{parentName:"tr",align:null},"filtering of log")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"metaTagPolicy")),(0,a.kt)("td",{parentName:"tr",align:null},"It is a object of class that implement ",(0,a.kt)("inlineCode",{parentName:"td"},"MetaTag")," interface. The simplest option is to use ",(0,a.kt)("inlineCode",{parentName:"td"},"SimpleMetaTag")," class. e.g. ",(0,a.kt)("inlineCode",{parentName:"td"},'SimpleMetaTag("MyTag")'),". A prefix globally to all tags. If it is empty string, then nothing is prepended to the log tag. If it is non-empty, the log tags become ",(0,a.kt)("inlineCode",{parentName:"td"},'metaTag + "_" + abbrivated tag'))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"provider")),(0,a.kt)("td",{parentName:"tr",align:null},"instance of a ",(0,a.kt)("inlineCode",{parentName:"td"},"LogProvider"),", to change the destination of log")))),(0,a.kt)("p",null,"For example,"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'IHLogConfig.init(IHLogSetting(metaTagPolicy = SimpleMetaTag("MYTAG")))\n')))}p.isMDXComponent=!0}}]);