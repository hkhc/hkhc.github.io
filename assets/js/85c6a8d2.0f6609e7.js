(self.webpackChunkhkhc_github_io=self.webpackChunkhkhc_github_io||[]).push([[26],{245:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return r},toc:function(){return s},default:function(){return u}});var l=n(2122),i=n(9756),a=(n(7294),n(3905)),o={title:"Basic Usage",id:"usage",sidebar_position:3},r={unversionedId:"ihlog/usage",id:"ihlog/usage",isDocsHomePage:!1,title:"Basic Usage",description:"Log a line",source:"@site/docs/ihlog/usage.md",sourceDirName:"ihlog",slug:"/ihlog/usage",permalink:"/docs/ihlog/usage",editUrl:"https://github.com/hkhc/hkhc.github.io/docs/ihlog/usage.md",version:"current",sidebarPosition:3,frontMatter:{title:"Basic Usage",id:"usage",sidebar_position:3},sidebar:"ihlogSidebar",previous:{title:"Installation",permalink:"/docs/ihlog/installation"},next:{title:"Tag Creation",permalink:"/docs/ihlog/tag-creation"}},s=[{value:"Log a line",id:"log-a-line",children:[{value:"Multi-line text",id:"multi-line-text",children:[]},{value:"Logging exception",id:"logging-exception",children:[]},{value:"Filtering log",id:"filtering-log",children:[]},{value:"Log with Lambda",id:"log-with-lambda",children:[]},{value:"Dump file to log",id:"dump-file-to-log",children:[]}]}],g={toc:s};function u(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,l.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"log-a-line"},"Log a line"),(0,a.kt)("p",null,"We may just log a line within class methods, extension methods, or package\nfunctions. ",(0,a.kt)("inlineCode",{parentName:"p"},"l")," is an extension method attached to all classes."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:"{3}","{3}":!0},'// Instance methods\nclass HelloWorld {\n    fun testOfLog() {\n        l.debug("Hello. Thanks for using IHLog")\n    }\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:"{3}","{3}":!0},'// Extension functions\nfun View.testOfLog() {\n    l.debug("Hello. Thanks for using IHLog")\n}\n')),(0,a.kt)("p",null,"To get a log reference in package function, we declare it in the Kotlin\nsource file. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:"{4,7}","{4,7}":!0},'// Package functions\npackage myPackage\n\nprivate val log by PackageLog()\n\nfun testOfLog() {\n    log.debug("Hello. Thanks for using IHLog")\n}\n')),(0,a.kt)("p",null,"Log tags are automatically generated for each of the example above, which is\nunique to the class in context."),(0,a.kt)("p",null,"The logging action is as simple as it could possibly be. We don't need to\ndeclare anything besides import, because it is\nimplemented as Kotlin extensions and delegate properties.. When method\n",(0,a.kt)("inlineCode",{parentName:"p"},"testOfLog")," is executed, the following log line is sent to the following can be\nobserved in logcat."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"03-03 02:04:49.949  1224  5126 D HeWo: Hello. Thanks for using IHLog\n")),(0,a.kt)("p",null,"where ",(0,a.kt)("inlineCode",{parentName:"p"},"HeWo")," is an automatically generated log tag. It is an abbreviation of the class ",(0,a.kt)("inlineCode",{parentName:"p"},"HelloWorld"),"."),(0,a.kt)("p",null,"Code to log for other severity levels are similar"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'l.trace("This is a trace line. It is mapped to Log.i()")\nl.info("This is a info line. It is mapped to Log.i()")\nl.debug("This is a debug line. It is mapped to Log.d()")\nl.warn("This is a warn line. It is mapped to Log.w()")\nl.err("This is a error line. It is mapped to Log.e()")\nl.fatal("This is a trace line. It is mapped to Log.wtf()")\n')),(0,a.kt)("p",null,"In some case if we want to specify the tag explicitly. We could just do that right away"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'l.debug("CUSTOM_TAG", "This is a trace line. It is mapped to Log.i()")\n')),(0,a.kt)("h3",{id:"multi-line-text"},"Multi-line text"),(0,a.kt)("p",null,"Log content with multiple lines will be broken down."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'l.debug("""\n    This os a multi-line text\n    It will be broken down\n""".trimIndent())\n')),(0,a.kt)("p",null,"will generate log like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"03-03 02:04:49.949  1224  5126 D HeWo: This is a multi-line text\n03-03 02:04:50.123  1224  5126 D HeWo: It will be broken down\n")),(0,a.kt)("h3",{id:"logging-exception"},"Logging exception"),(0,a.kt)("p",null,"We have seen log with error level:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'err("This is an error")\n')),(0,a.kt)("p",null,"We may also log ",(0,a.kt)("inlineCode",{parentName:"p"},"Throwable")," object directly:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'try {\n  val myArray = arrayOf(1,2,3)\n  val myValue = myArray(3) // oops\n}\ncatch (e: ArrayIndexOutOfBoundException) {\n    l.err("This is an exception", e)\n}\n')),(0,a.kt)("p",null,"Stacktrace of the exception is generated and logged line-by-line"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-text",metastring:'file="log to standard output"',file:'"log',to:!0,standard:!0,'output"':!0},"03-03 15:45:15.431  -/AIOOBE e/This is an error\n03-03 15:45:15.435  -/AIOOBE e/java.lang.ArrayIndexOutOfBoundsException: 3\n03-03 15:45:15.435  -/AIOOBE e/....\n03-03 15:45:15.455  -/AIOOBE e/ at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)\n03-03 15:45:15.455  -/AIOOBE e/\n")),(0,a.kt)("h3",{id:"filtering-log"},"Filtering log"),(0,a.kt)("p",null,"We may filter log by log severity level anytime."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"LogSettings.logLevel = Priority.ERROR\n")),(0,a.kt)("p",null,"It take effect from the next log invocation."),(0,a.kt)("p",null,"THe severity is in the increasing order of the following:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Trace"),(0,a.kt)("li",{parentName:"ul"},"Debug"),(0,a.kt)("li",{parentName:"ul"},"Info"),(0,a.kt)("li",{parentName:"ul"},"Warn"),(0,a.kt)("li",{parentName:"ul"},"Error"),(0,a.kt)("li",{parentName:"ul"},"Fatal")),(0,a.kt)("h3",{id:"log-with-lambda"},"Log with Lambda"),(0,a.kt)("p",null,"When we have the capability of filtering logs, we start to worry that our log invocation peform\nunnecessary work. For example,"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'l.debug("The current balance is ${slowFunctionToGetBalance()}.")\n')),(0,a.kt)("p",null,"Sometimes, it may be costly to construct the string for log, and we don't want to pay the price\nif the ",(0,a.kt)("inlineCode",{parentName:"p"},"logLevel")," property filtered the log."),(0,a.kt)("p",null,"We may use lambda to defer the processing of the log content:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'l.debug { "The current balance is ${slowFunctionToGetBalance()}." }\n')),(0,a.kt)("p",null,"Then the actual evaluation of the string is deferred until it is needed. No\ncost is paid for filtered log."),(0,a.kt)("h3",{id:"dump-file-to-log"},"Dump file to log"),(0,a.kt)("p",null,"We may dump a file to log easily."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'File("My-file.txt").debug()\n')),(0,a.kt)("p",null,"The content of file ",(0,a.kt)("inlineCode",{parentName:"p"},"My-file.txt")," will be write to log, one line per log line."),(0,a.kt)("p",null,"To avoid overwhelming underlying log. The function limit the maximum size of\nfile write to underlying log. Default is 4KB. We may change this by\nproviding maximum size parameter (in bytes):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'File("My-file.txt").debug(10240)\n')))}u.isMDXComponent=!0}}]);